# Virus Predictor

# I worked on this challenge [by myself, with: ].
# We spent [#] hours on this challenge.

# EXPLANATION OF require_relative
#  Require relative tells the program that it needs information from another file.  Require relative is a more efficient command compared to 'require' because 'require relative' is more specific with where it searches (it only searches in the current directory).
#

require_relative 'state_data'

class VirusPredictor

#This is a method that receives parameters that we put in and setting those parameters to instance variables.
  def initialize(state_of_origin, population_density, population)
    @state = state_of_origin
    @population = population
    @population_density = population_density
  end


# This is a method that calls two other private methods (and uses the instance variables as arguments) that print a string stating the number of deaths and the rate of disease spread
  def virus_effects
    predicted_deaths
    speed_of_spread
  end

  private

# This private method takes in three arguments (population density, population, and the name of the state). It sets a new variable (called number_of_deaths) to a number generated by a formula. As population density goes down, number of (predicted) deaths go down and it prints a string to the terminal saying how many people will die.
  def predicted_deaths
    # predicted deaths is solely based on population density
    if @population_density >= 200
      number_of_deaths = (@population * 0.4).floor
    elsif @population_density >= 150
      number_of_deaths = (@population * 0.3).floor
    elsif @population_density >= 100
      number_of_deaths = (@population * 0.2).floor
    elsif @population_density >= 50
      number_of_deaths = (@population * 0.1).floor
    else
      number_of_deaths = (@population * 0.05).floor
    end

    print "#{@state} will lose #{number_of_deaths} people in this outbreak"

  end

#This private method takes two arguments (population density and the name of the state). It creates a new variable called speed and sets speed equal a number based on the population density. As population density goes down, speed goes up. This method prints a string.

  def speed_of_spread #in months
    # We are still perfecting our formula here. The speed is also affected
    # by additional factors we haven't added into this functionality.
    speed = 0.0

    if @population_density >= 200
      speed += 0.5
    elsif @population_density >= 150
      speed += 1
    elsif @population_density >= 100
      speed += 1.5
    elsif @population_density >= 50
      speed += 2
    else
      speed += 2.5
    end

    puts " and will spread across the state in #{speed} months.\n\n"

  end

end

#=======================================================================

# DRIVER CODE
 # initialize VirusPredictor for each state


# alabama = VirusPredictor.new("Alabama", STATE_DATA["Alabama"][:population_density], STATE_DATA["Alabama"][:population])
# alabama.virus_effects

# jersey = VirusPredictor.new("New Jersey", STATE_DATA["New Jersey"][:population_density], STATE_DATA["New Jersey"][:population])
# jersey.virus_effects

# california = VirusPredictor.new("California", STATE_DATA["California"][:population_density], STATE_DATA["California"][:population])
# california.virus_effects

# alaska = VirusPredictor.new("Alaska", STATE_DATA["Alaska"][:population_density], STATE_DATA["Alaska"][:population])
# alaska.virus_effects


def createReport(hash)
  hash.each_key do |state_name|
    state = VirusPredictor.new(state_name, hash[state_name][:population_density], hash[state_name][:population])
    state.virus_effects
  end
end

createReport(STATE_DATA)




#=======================================================================
# Reflection Section

# 1) What are the differences between the two different hash syntaxes shown in the state_data file?
# The hash is a nested hash.  The outer hash uses a string as the key with the inner has
# as the value.  The inner hash has a symbol for the key and an integer for the value.

# 2) What does require_relative do? How is it different from require?
#  Require relative tells the program that it needs information from another file.  Require
# relative is a more efficient command compared to 'require' because 'require relative' is
# more specific with where it searches (it only searches in the current directory).

# 3) What are some ways to iterate through a hash?
#  There are several built-in methods for iterating through a hash: .each_pair, .each_key,
# .each_value are my favorites.

# 4) When refactoring virus_effects, what stood out to you about the variables, if anything?
#  We were passing in instance variables which was totally unnecessary since an instance
# variable can be accessed from anywhere inside a class.

# 5) What concept did you most solidify in this challenge?
#  One thing that was solidified for me, which is probably a very basic concept, was the
# process of creating a large group of instances of a class using iteration.  I actually
# do not think I have ever done that before, so it was interesting to figure this out and
# make it happen.

